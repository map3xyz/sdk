{"mappings":"A0DWA;IACE,OAAO,EAAE,MAAM,CAAC;IAChB,OAAO,CAAC,EAAE;QACR,SAAS,CAAC,EAAE;YACV,0BAA0B,CAAC,EAAE,CAC3B,WAAW,EAAE,MAAM,EACnB,WAAW,EAAE,MAAM,EACnB,MAAM,EAAE,MAAM,KACX,OAAO,CAAC,OAAO,CAAC,CAAC;YACtB,yBAAyB,CAAC,EAAE,CAC1B,KAAK,EAAE,MAAM,EACb,WAAW,EAAE,MAAM,EACnB,MAAM,EAAE,MAAM,KACX,OAAO,CAAC;gBACX,QAAQ,CAAC,EAAE,MAAM,CAAC;gBAClB,OAAO,CAAC,EAAE,MAAM,CAAC;gBACjB,WAAW,CAAC,EAAE,MAAM,CAAC;aACtB,CAAC,CAAC;YACH,kBAAkB,CAAC,EAAE,CACnB,KAAK,EAAE,MAAM,EACb,WAAW,EAAE,MAAM,KAEjB,OAAO,CAAC;gBAAE,OAAO,EAAE,MAAM,CAAC;gBAAC,IAAI,CAAC,EAAE,MAAM,CAAA;aAAE,CAAC,GAC3C;gBAAE,OAAO,EAAE,MAAM,CAAC;gBAAC,IAAI,CAAC,EAAE,MAAM,CAAA;aAAE,CAAC;YACvC,OAAO,CAAC,EAAE,MAAM,IAAI,CAAC;YACrB,QAAQ,CAAC,EAAE,MAAM,IAAI,CAAC;YACtB,SAAS,CAAC,EAAE,CACV,KAAK,EAAE,MAAM,EACb,WAAW,EAAE,MAAM,EACnB,OAAO,CAAC,EAAE,MAAM,KACb,IAAI,CAAC;YACV,cAAc,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,KAAK,IAAI,CAAC;YACzD,SAAS,CAAC,EAAE,CACV,MAAM,EAAE,MAAM,EACd,WAAW,EAAE,MAAM,EACnB,OAAO,CAAC,EAAE,MAAM,KACb,IAAI,CAAC;SACX,CAAC;QACF,SAAS,CAAC,EAAE;YACV,OAAO,CAAC,EAAE,MAAM,CAAC;YACjB,MAAM,CAAC,EAAE,MAAM,CAAC;YAChB,OAAO,CAAC,EAAE,MAAM,CAAC;YACjB,SAAS,CAAC,EAAE,OAAO,CAAC;YACpB,UAAU,CAAC,EAAE,MAAM,GAAG,MAAM,CAAC;YAC7B,IAAI,CAAC,EAAE,MAAM,CAAC;YACd,WAAW,CAAC,EAAE,MAAM,CAAC;YACrB,aAAa,CAAC,EAAE,aAAa,CAAC;YAC9B,IAAI,CAAC,EAAE,MAAM,CAAC;YACd,eAAe,CAAC,EAAE,MAAM,EAAE,CAAC;SAC5B,CAAC;QACF,KAAK,CAAC,EAAE;YACN,OAAO,CAAC,EAAE,MAAM,CAAC;YACjB,MAAM,CAAC,EAAE;gBACP,MAAM,CAAC,EAAE,MAAM,CAAC;gBAChB,OAAO,CAAC,EAAE,MAAM,CAAC;aAClB,CAAC;YACF,KAAK,CAAC,EAAE;gBACN,MAAM,CAAC,EAAE,MAAM,CAAC;gBAChB,EAAE,CAAC,EAAE,MAAM,CAAC;gBACZ,KAAK,CAAC,EAAE,MAAM,CAAC;aAChB,CAAC;YACF,MAAM,CAAC,EAAE,IAAI,GAAG,IAAI,CAAC;YACrB,KAAK,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC;SAC1B,CAAC;KACH,CAAC;IACF,MAAM,EAAE,MAAM,CAAC;CAChB;AACD;gBAKc,MAAM,EAAE,cAAc;IAuO3B,IAAI;IAwBJ,KAAK;CAGb;AAED,OAAO,MAAM,4BAA6B,cAAc,SAEvD,CAAC","sources":["src/src/locales/index.ts","src/i18n.ts","src/src/components/InnerWrapper/index.tsx","src/src/components/ErrorWrapper/index.tsx","src/src/components/LoadingWrapper/index.tsx","src/src/generated/apollo-gql.tsx","src/src/constants/iso4217.ts","src/src/utils/abis/erc20.ts","src/src/utils/transactions/evm/index.ts","src/src/providers/Store/index.tsx","src/src/components/ProgressBar/index.tsx","src/src/hooks/useChainWatcher.tsx","src/src/components/ListItem/index.tsx","src/src/components/CountdownTimer/index.tsx","src/src/components/StepTitle/index.tsx","src/src/utils/debounce.ts","src/src/steps/AssetSelection/index.tsx","src/src/hooks/useOnClickOutside.tsx","src/src/components/methods/BinancePay/index.tsx","src/src/components/confirmations/BridgeQuoteConfirmation/index.tsx","src/src/components/MethodIcon/index.tsx","src/src/components/methods/types.ts","src/src/components/methods/WalletConnect/index.tsx","src/src/components/methods/WindowEthereum/index.tsx","src/src/components/BgOffsetWrapper/index.tsx","src/src/components/StateDescriptionHeader/index.tsx","src/src/hooks/useDepositAddress.tsx","src/src/utils/toHex.ts","src/src/hooks/useWeb3.tsx","src/src/hooks/usePrebuildTx.tsx","src/src/steps/EnterAmount/index.tsx","src/src/steps/NetworkSelection/index.tsx","src/src/steps/PaymentMethod/index.tsx","src/src/hooks/useModalSize.tsx","src/src/steps/BinancePay/index.tsx","src/src/steps/ConfirmRequiredAmount/index.tsx","src/src/utils/iso8601.ts","src/src/steps/History/HistoryContactUs/index.tsx","src/src/steps/History/index.tsx","src/src/steps/Result/utils.ts","src/src/utils/supabase.ts","src/src/hooks/useBridgeTransactionProgress.tsx","src/src/constants/index.ts","src/src/hooks/useProviderTransactionProgress.tsx","src/src/steps/Result/BridgeQuoteTransactionDetails/index.tsx","src/src/steps/Result/TransactionDetails/index.tsx","src/src/steps/Result/index.tsx","src/src/hooks/useWatchedAddressProgress.tsx","src/src/steps/ShowAddress/index.tsx","src/src/steps/SwitchChain/index.tsx","src/src/steps/WalletConnect/index.tsx","src/src/steps/index.tsx","src/src/App.withAddressAndNetwork.tsx","src/src/App.withAssetId.tsx","src/src/App.withNetwork.tsx","src/src/hooks/useWindowSize.tsx","src/src/utils/parseJwt.ts","src/src/App.tsx","src/src/index.tsx","src/index.tsx"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"import { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport { offsetLimitPagination } from '@apollo/client/utilities';\nimport { colord, extend } from 'colord';\nimport mixPlugin from 'colord/plugins/mix';\nimport { createRoot, Root } from 'react-dom/client';\n\nimport App from './App';\nimport { ISO_4217_TO_SYMBOL } from './constants/iso4217';\n\nextend([mixPlugin]);\n\nexport interface Map3InitConfig {\n  anonKey: string;\n  options?: {\n    callbacks?: {\n      handleAuthorizeTransaction?: (\n        fromAddress: string,\n        networkCode: string,\n        amount: string\n      ) => Promise<Boolean>;\n      handleOrderFeeCalculation?: (\n        asset: string,\n        networkCode: string,\n        amount: string\n      ) => Promise<{\n        fixedFee?: number;\n        message?: string;\n        variableFee?: number;\n      }>;\n      onAddressRequested?: (\n        asset: string,\n        networkCode: string\n      ) =>\n        | Promise<{ address: string; memo?: string }>\n        | { address: string; memo?: string };\n      onClose?: () => void;\n      onExpire?: () => void;\n      onFailure?: (\n        error: string,\n        networkCode: string,\n        address?: string\n      ) => void;\n      onOrderCreated?: (orderId: string, type: string) => void;\n      onSuccess?: (\n        txHash: string,\n        networkCode: string,\n        address?: string\n      ) => void;\n    };\n    selection?: {\n      address?: string;\n      amount?: string;\n      assetId?: string;\n      canBridge?: boolean;\n      expiration?: string | number;\n      fiat?: string;\n      networkCode?: string;\n      paymentMethod?: 'binance-pay';\n      rate?: number;\n      shortcutAmounts?: number[];\n    };\n    style?: {\n      appName?: string;\n      colors?: {\n        accent?: string;\n        primary?: string;\n      };\n      embed?: {\n        height?: string;\n        id?: string;\n        width?: string;\n      };\n      locale?: 'en' | 'es';\n      theme?: 'dark' | 'light';\n    };\n  };\n  userId: string;\n}\nexport class Map3 {\n  private onClose: () => void;\n  private root: Root;\n  private config: Map3InitConfig;\n\n  constructor(config: Map3InitConfig) {\n    if (!config.anonKey) {\n      throw new Error('anonKey is required.');\n    }\n\n    if (!config.userId) {\n      throw new Error('userId is required.');\n    }\n\n    if (\n      config.options?.selection?.paymentMethod !== 'binance-pay' &&\n      !config.options?.callbacks?.onAddressRequested\n    ) {\n      throw new Error('options.callbacks.onAddressRequested is required.');\n    }\n\n    if (!config.options) {\n      config.options = {};\n    }\n\n    if (!config.options.selection) {\n      config.options.selection = {};\n    }\n\n    if (!config.options.selection.fiat) {\n      config.options.selection.fiat = 'USD';\n    }\n\n    const isAsset =\n      config.options.selection.assetId ||\n      (config.options.selection.address &&\n        config.options.selection.networkCode);\n\n    if (!ISO_4217_TO_SYMBOL[config.options.selection.fiat]) {\n      console.warn(\n        `Warning: fiat ${config.options.selection.fiat} is not supported. Falling back to USD.`\n      );\n      config.options.selection.fiat = 'USD';\n    }\n\n    if (\n      config.options.selection.shortcutAmounts &&\n      config.options.selection.shortcutAmounts.length > 3\n    ) {\n      console.warn(\n        'Warning: shortcutAmounts should not exceed 3 values. Falling back to first 3 values.'\n      );\n      config.options.selection.shortcutAmounts = config.options.selection.shortcutAmounts.slice(\n        0,\n        3\n      );\n    }\n\n    if (\n      config.options.selection.address &&\n      !config.options.selection.networkCode\n    ) {\n      console.warn(\n        'Warning: networkCode is required when address is provided. Falling back to asset selection.'\n      );\n      config.options.selection.address = undefined;\n    }\n\n    if (config.options.selection.amount && !isAsset) {\n      console.warn(\n        'Warning: amount is provided but not assetId or address and network. Falling back to undefined amount.'\n      );\n      config.options.selection.amount = undefined;\n    }\n\n    if (config.options.selection.rate && !isAsset) {\n      console.warn(\n        'Warning: rate is provided but not assetId or address and network. Falling back to default rate.'\n      );\n      config.options.selection.rate = undefined;\n    }\n\n    if (config.options.selection.expiration) {\n      try {\n        const timeRemainingMs =\n          new Date(config.options.selection.expiration).getTime() -\n          new Date().getTime();\n\n        if (timeRemainingMs < 0) {\n          throw new Error('Expiration is in the past.');\n        }\n      } catch (e) {\n        console.warn(\n          'Warning: expiration is in the past or invalid. Falling back to default expiration.'\n        );\n        config.options.selection.expiration = undefined;\n      }\n    }\n\n    if (config.options.style?.appName) {\n      document.title = config.options.style.appName;\n    }\n\n    // default colors\n    const shades = {\n      '100': 'rgb(245, 245, 245)',\n      '200': 'rgb(229, 229, 229)',\n      '400': 'rgb(163, 163, 163)',\n      '500': 'rgb(115, 115, 115)',\n      '700': 'rgb(64, 64, 64)',\n      '800': 'rgb(38, 38, 38)',\n      '900': 'rgb(24, 24, 24)',\n    };\n\n    Object.keys(shades).forEach((shade) => {\n      document.body.style.setProperty(\n        `--primary-color-${shade}`,\n        shades[shade as keyof typeof shades]\n      );\n    });\n\n    // orange-600\n    const orange600 = 'rgb(234, 88, 12)';\n    document.body.style.setProperty('--accent-color', orange600);\n    document.body.style.setProperty(\n      '--accent-color-light',\n      colord(config.options.style?.colors?.accent || orange600)\n        .lighten(0.35)\n        .toHex()\n    );\n\n    // theme colors\n    if (config.options.style && config.options.style.colors) {\n      const validKeys = ['primary', 'accent'];\n      const invalidKeys = Object.keys(config.options.style.colors).filter(\n        (key) => !validKeys.includes(key)\n      );\n      if (invalidKeys.length > 0) {\n        console.warn(\n          `Warning: invalid key passed to colors. Valid keys are: ${validKeys.join(\n            ', '\n          )}`\n        );\n\n        invalidKeys.forEach((key) => {\n          delete config.options!.style!.colors![key as 'primary' | 'accent'];\n        });\n      }\n\n      Object.keys(config.options.style.colors).forEach((key) => {\n        if (\n          !CSS.supports(\n            'color',\n            config.options!.style!.colors![key as 'primary' | 'accent'] || ''\n          )\n        ) {\n          console.warn(\n            `Warning: invalid value passed to colors.${key}. Falling back to default.`\n          );\n\n          delete config.options!.style!.colors![key as 'primary' | 'accent'];\n        }\n      });\n\n      if (config.options.style.colors.accent) {\n        document.body.classList.add('map3-accent');\n        document.body.style.setProperty(\n          '--accent-color',\n          config.options.style.colors.accent\n        );\n      }\n\n      if (config.options.style.colors.primary) {\n        const primaryColor = colord(config.options.style.colors.primary);\n\n        if (primaryColor.isDark()) {\n          document.body.classList.add('dark');\n        }\n\n        Object.keys(shades).forEach((shade) => {\n          document.body.style.setProperty(\n            `--primary-color-${shade}`,\n            primaryColor.mix(shades[shade as keyof typeof shades], 0.5).toHex()\n          );\n        });\n      }\n    }\n\n    this.config = config;\n\n    this.onClose = () => {\n      this.root.unmount();\n      this.config.options?.callbacks?.onClose?.();\n    };\n\n    const element = document.createElement('div');\n    const embed = config.options.style?.embed?.id\n      ? document.getElementById(config.options.style?.embed?.id)\n      : null;\n\n    if (embed) {\n      embed.appendChild(element);\n      embed.classList.add('map3');\n    } else {\n      document.body.appendChild(element);\n    }\n\n    if (\n      config.options?.style?.theme === 'dark' &&\n      !document.body.classList.contains('dark')\n    ) {\n      document.body.classList.add('dark');\n    }\n\n    var parent = document.createElement('div');\n    parent.setAttribute('style', 'width:30px;height:30px;');\n    parent.classList.add('scrollbar-test');\n\n    var child = document.createElement('div');\n    child.setAttribute('style', 'width:100%;height:40px');\n    parent.appendChild(child);\n    document.body.appendChild(parent);\n\n    // Measure the child element, if it is not\n    // 30px wide the scrollbars are obtrusive.\n    // @ts-ignore\n    var scrollbarWidth = 30 - parent?.firstChild?.clientWidth;\n    if (scrollbarWidth) {\n      document.body.classList.add('map3-layout-scrollbar-obtrusive');\n    }\n\n    document.body.removeChild(parent);\n\n    this.root = createRoot(element);\n  }\n\n  public open() {\n    const client = new ApolloClient({\n      cache: new InMemoryCache({\n        typePolicies: {\n          Query: {\n            fields: {\n              assetsForOrganization: offsetLimitPagination(),\n            },\n          },\n        },\n      }),\n      headers: {\n        Authorization: 'Bearer ' + this.config.anonKey,\n        'x-map3-user': this.config.userId,\n      },\n      uri: process.env.CONSOLE_API_URL + '/graphql',\n    });\n    this.root.render(\n      <ApolloProvider client={client}>\n        <App config={this.config} onClose={this.onClose} />\n      </ApolloProvider>\n    );\n  }\n\n  public close() {\n    this.onClose();\n  }\n}\n\nexport const initMap3Supercharge = (args: Map3InitConfig) => {\n  return new Map3(args);\n};\n\nif (typeof window !== 'undefined') {\n  // @ts-ignore\n  window.initMap3Supercharge = initMap3Supercharge;\n}\n"],"names":[],"version":3,"file":"types.d.ts.map"}